
@{
    ViewData["Title"] = "Auswertung";
    Layout = "_AdminLayout";
}

@using System.Linq;
@using Sopro.ViewModels
@using Sopro.Models.Infrastructure
@model EvaluationViewModel
@{
    // Erstellung der Labels der Diagramme.
    var LabelsPlug = Newtonsoft.Json.JsonConvert.SerializeObject((new List<string> { "CCS", "Type 2" }).ToList());
    var LabelsStatus = Newtonsoft.Json.JsonConvert.SerializeObject((new List<string> { "Akzeptiert", "Abgelehnt" }).ToList());
    var LabelsDuration = Newtonsoft.Json.JsonConvert.SerializeObject(Enumerable.Range(0, Model.scenario.getLocationWorkload().ToList().Count));

    // Serialisierung der anzuzeigenden Daten.
    var plugDistributionAcceptedValues = Newtonsoft.Json.JsonConvert.SerializeObject(Model.plugDistributionAccepted.ToList());
    var plugDistributionDeclinedValues = Newtonsoft.Json.JsonConvert.SerializeObject(Model.plugDistributionDeclined.ToList());
    var bookingSuccessRateValues = Newtonsoft.Json.JsonConvert.SerializeObject(new List<double> { Model.bookingSuccessRate, 100 - Model.bookingSuccessRate });
    var locationWorkloadValues = Newtonsoft.Json.JsonConvert.SerializeObject(Model.locationWorkload.ConvertAll(Convert.ToInt32).ToList());

    List<string> stationWorkloads = new List<string>();
    foreach (List<double> d in Model.stationWorkload)
    {
        stationWorkloads.Add(Newtonsoft.Json.JsonConvert.SerializeObject(d.ConvertAll(Convert.ToInt32).ToList()));
    }

    List<int> stationsPerZone = new List<int>();
    foreach (Zone zone in Model.scenario.location.zones)
    {
        stationsPerZone.Add(zone.stations.Count);
    }
}

<h1 class="display-3 mb-5 pt-5">Auswertung</h1>

<!-- Allgemeines -->
<div>
    <p class="lead text-dark">Es wurden insgesamt @Model.scenario.generatedBookings.Count Buchungsanfragen gestellt.</p>
    <p class="lead text-dark">Davon wurden @Model.scenario.location.schedule.bookings.Count Anfragen akzeptiert.</p>
    @if (Model.suggestions[0].GetType().Name.Equals("CondenseInfrastructureSuggestion"))
    {
        <div class="bg-warning rounded">
            <p class="lead text-dark p-2">@Model.suggestions[0].suggestion</p>
        </div>
    }
    else if (Model.suggestions[0].GetType().Name.Equals("ExpandInfrastructureSuggestion"))
    {
        <div class="bg-warning rounded">
            <p class="lead text-dark">@Model.suggestions[0].suggestion</p>
        </div>
    }

    <div>
        <form asp-controller="Admin" asp-action="Export" method="get" class="form-horizontal">
            <input class="btn btn-primary btn-mhp" type="submit" name="exportBooking" value="Bearbeiten" />
        </form>
    </div>
</div>

<!-- Übersicht (Kreisdiagramme) -->
<div class="display-4 pt-lg-4">Übersicht</div>
<div class="box-body d-flex justify-content-center flex-wrap pt-lg-4">
    <div class="chart-container">
        <canvas id="chart" style="width:100%; height:300px"></canvas>
    </div>
    <div class="chart-container">
        <canvas id="chart2" style="width:100%; height:300px"></canvas>
    </div>
    <div class="chart-container">
        <canvas id="chart3" style="width:100%; height:300px"></canvas>
    </div>
</div>

<!-- Standortsauslastung -->
<div class="display-4 pt-lg-4">Standortsauslastung</div>
<div class="box-body d-flex pt-lg-4">
    <div class="chart-container" style="position: relative; height:30vh; width:80vw">
        <canvas id="chart4"></canvas>
    </div>
</div>

<!-- Stationsauslastung -->
<div class="display-4 pt-lg-4">Stationsauslastung</div>
<div class="box-body pt-lg-4">
    @{int stationCounter = 5; }
    @foreach (Zone zone in Model.scenario.location.zones)
    {
    <div class="shadow rounded mt-lg-4">
        <div class="h3 pl-3 pt-3">Zone @zone.site  </div><hr/>
        <div class="d-flex flex-wrap">
            @foreach (Station station in zone.stations)
            {
                string id = "chart" + stationCounter.ToString();

                <div class="chart-container" style="flex: 0 0 49%; height: 200px;">
                    <canvas id="@id"></canvas>
                </div>

                stationCounter++;
            }
        </div>
    </div>
    }
</div>

<!-- Chart.js und JQuery.js -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.bundle.min.js"></script>
<script src="~/lib/jquery/dist/jquery.min.js"></script>

<!-- Rendern der Charts -->
<script type="text/javascript">
        $(function () {
            var chartName = "chart";
            var ctx = document.getElementById(chartName).getContext('2d');
            var data =
            {
                labels: @Html.Raw(LabelsPlug),
                datasets: [{
                    label: "Plug distribution [Accepted Plugs]",
                    backgroundColor: [
                        'rgba(89, 181, 228, 0.2)',
                        'rgba(254, 191, 45, 0.2)'
                    ],
                    borderColor: [
                        'rgba(89, 181, 228, 1)',
                        'rgba(254, 191, 45, 1)'
                    ],
                    borderWidth: 1,
                    data: @Html.Raw(plugDistributionAcceptedValues),
                }]
            };

            var chartName2 = "chart2";
            var ctx2 = document.getElementById(chartName2).getContext('2d');
            var data2 = {
                labels: @Html.Raw(LabelsPlug),
                datasets: [{
                    label: "Plug distribution [Declined Plugs]",
                    backgroundColor: [
                        'rgba(0, 0, 0, 0.5)',
                        'rgba(99, 99, 99, 0.2)'
                    ],
                    borderColor: [
                        'rgba(0, 0, 0, 1)',
                        'rgba(99, 99, 99, 1)'
                    ],
                    borderWidth: 1,
                    data: @Html.Raw(plugDistributionDeclinedValues),
                }]
            };

            var chartName3 = "chart3";
            var ctx3 = document.getElementById(chartName3).getContext('2d');
            var data3 = {
                labels: @Html.Raw(LabelsStatus),
                datasets: [{
                    label: "Booking distibution",
                    backgroundColor: [
                        'rgba(141, 205, 89, 0.2)',
                        'rgba(237, 93, 146, 0.2)'
                    ],
                    borderColor: [
                        'rgba(141, 205, 89, 1)',
                        'rgba(237, 93, 146, 1)'
                    ],
                    borderWidth: 1,
                    data: @Html.Raw(bookingSuccessRateValues),
                }]
            };

            var chartName4 = "chart4";
            var ctx4 = document.getElementById(chartName4).getContext('2d');
            var data4 = {
                labels: @Html.Raw(LabelsDuration),
                datasets: [{
                    label: "Location Workload",
                    backgroundColor: [
                        'rgba(0, 0, 153, 0.2)'
                    ],
                    borderColor: [
                        'rgba(0, 0, 153, 1)'
                    ],
                    borderWidth: 1,
                    data: @Html.Raw(locationWorkloadValues),
                    }]
            };

            @for (int i = 5; i < stationWorkloads.Count + 5; ++i)
            {
                string chartName = "chartName" + i.ToString();
                string name = "chart" + i.ToString();
                string ctx = "ctx" + i.ToString();
                string chartdata = "data" + i.ToString();
                string num = "Station " + (i - 5).ToString();
                <text>
                    var @chartName = "@name";
                    var @ctx = document.getElementById(@chartName).getContext('2d');
                    var @chartdata = {
                        labels: @Html.Raw(LabelsDuration),
                        datasets: [{
                            label: "@num",
                            backgroundColor: [
                                'rgba(0, 0, 153, 0.2)'
                            ],
                            borderColor: [
                                'rgba(0, 0, 153, 1)'
                            ],
                            borderWidth: 1,
                            data: @Html.Raw(stationWorkloads[i - 5]),
                            }]
                    };
                </text>
            }

            var options =
            {
                maintainAspectRatio: false,
                legend: {
                    reverse: true
                },
                animation: {
                    duration: 2000,
                },
                title: {
                    display: true,
                    text: ['Steckerverteilung', 'Akzeptierte Buchungen'],
                    fontSize: 20,
                    fontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                    fontStyle: 'normal',
                    fontColor: '#000'
                }
            };

            var options2 =
            {
                maintainAspectRatio: false,
                legend: {
                    reverse: true
                },
                animation: {
                    duration: 2000,
                },
                title: {
                    display: true,
                    text: ['Steckerverteilung', 'Abgelehnte Buchungen'],
                    fontSize: 20,
                    fontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                    fontStyle: 'normal',
                    fontColor: '#000'
                }
            };

            var options3 =
            {
                maintainAspectRatio: false,
                legend: {
                    reverse: true
                },
                animation: {
                    duration: 2000,
                },
                title: {
                    display: true,
                    text: "Buchungen",
                    fontSize: 20,
                    fontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                    fontStyle: 'normal',
                    fontColor: '#000'
                }
            };

            var options4 = {
                maintainAspectRatio: false,
                responsive: true,
                legend: {
                    display: false
                },
                scales: {
                    yAxes: [{
                        ticks: {
                            min: 0,
                            max: 100,
                            beginAtZero: true
                        },
                        gridLines: {
                            display: true,
                            color: "rgba(255,99,164,0.2)"
                        }
                    }],
                    xAxes: [{
                        ticks: {
                            min: 0,
                            beginAtZero: true
                        },
                        gridLines: {
                            display: false
                        }
                    }]
                }
            };

            var options5 = {
                maintainAspectRatio: false,
                scales: {
                    yAxes: [{
                        ticks: {
                            min: 0,
                            max: 100,
                            beginAtZero: true
                        },
                        gridLines: {
                            display: true,
                            color: "rgba(255,99,164,0.2)"
                        }
                    }],
                    xAxes: [{
                        ticks: {
                            min: 0,
                            beginAtZero: true
                        },
                        gridLines: {
                            display: false
                        }
                    }]
                }
            };

            var myChart = new Chart(ctx, {
                options: options,
                data: data,
                type: 'pie'
            });

            var myChart2 = new Chart(ctx2, {
                options: options2,
                data: data2,
                type: 'pie'
            });

            var myChart3 = new Chart(ctx3, {
                options: options3,
                data: data3,
                type: 'pie'
            });

            var myChart4 = new Chart(ctx4, {
                options: options4,
                data: data4,
                type: 'line'
            });

            @for (int i = 5; i < stationWorkloads.Count + 5; ++i)
            {
                string ctx = "ctx" + i.ToString();
                string data = "data" + i.ToString();
                string name = "myChart" + i.ToString();

                <text>
             var @name = new Chart(@ctx, {
                options: options5,
                data: @data,
                type: 'line'
             });
                </text>
            }
            });
</script>
